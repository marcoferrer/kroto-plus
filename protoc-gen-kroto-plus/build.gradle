/**
 * We're are using the spring boot gradle plugin
 * to create a truly executable jar, compatible
 * with the protobuf gradle plugin
 *
 * https://github.com/google/protobuf-gradle-plugin/issues/168
 * https://github.com/salesforce/reactive-grpc/issues/21
 *
 */
apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'
apply from: "$rootDir/publishing.gradle"

description 'Kroto+ Proto-c Plugin'

def mainClassName = 'com.github.marcoferrer.krotoplus.KrotoPlusProtoCMain'
def pinnedKtVersion = '1.3.11'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies{
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${Versions.coroutines}"
    implementation "io.grpc:grpc-protobuf:${Versions.grpc}"
    implementation "com.google.protobuf:protobuf-java:${Versions.protobuf}"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation ("com.squareup:kotlinpoet:1.0.1") {
        exclude group: 'org.jetbrains.kotlin'
    }

    // For supporting code generation through kts scripts
    implementation "org.jetbrains.kotlin:kotlin-script-util:${pinnedKtVersion}"
    implementation "org.jetbrains.kotlin:kotlin-script-runtime:${pinnedKtVersion}"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:${pinnedKtVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${Versions.protobuf}"

    // For supporting yaml as a configuration format
    implementation "com.fasterxml.jackson.core:jackson-core:2.9.8"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8"

}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${Versions.protobuf}" }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java{ outputSubDir = 'generated' }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

clean {
    //noinspection GroovyAssignabilityCheck
    delete "${protobuf.generatedFilesBaseDir}/generated"
}

bootJar {
    launchScript()
    classifier = 'jvm8'
    // Unpack the libs require for enabling user scripting support
    // Eventually we will want to an alternative the to embedded
    // kotlin compiler and possibly use the daemon instead.
    requiresUnpack '**/kotlin-*.jar'
    requiresUnpack '**/kotlinpoet*.jar'
    requiresUnpack '**/protoc-gen-kroto-*.jar'
    requiresUnpack '**/protobuf-*.jar'

    // Explicitly add our non-executable artifact to the libs directory so that
    // it can be made available to the kotlin script compiler classpath.
    dependsOn jar
    from(jar) { into '/BOOT-INF/lib' }

    manifest {
        attributes 'Start-Class': mainClassName
        attributes 'Implementation-Title' : 'Kroto+ Proto-c Plugin'
        attributes 'Implementation-Version': project.version
    }
}

jar.enabled = true

artifacts {
    archives bootJar
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            artifact bootJar {
                classifier "jvm8"
            }
        }
    }
}

// We cant update the kotlin version for the 
// compiler plugin with out sufficient refactoring.
// Until then we need to pin down the kotlin version
configurations { main }
configurations.main.resolutionStrategy.dependencySubstitution {
    substitute module("org.jetbrains.kotlin:kotlin-stdlib") with module("org.jetbrains.kotlin:kotlin-stdlib:${pinnedKtVersion}")
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/kotlin/main")
        testOutputDir = file("$buildDir/classes/kotlin/test")
    }
}

