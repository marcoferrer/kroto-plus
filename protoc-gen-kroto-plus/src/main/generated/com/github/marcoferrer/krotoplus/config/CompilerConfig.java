// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: krotoplus/compiler/config.proto

package com.github.marcoferrer.krotoplus.config;

/**
 * <pre>
 * Message backing the root of a Kroto+ configuration file.
 * </pre>
 *
 * Protobuf type {@code krotoplus.compiler.CompilerConfig}
 */
public  final class CompilerConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:krotoplus.compiler.CompilerConfig)
    CompilerConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CompilerConfig.newBuilder() to construct.
  private CompilerConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CompilerConfig() {
    grpcStubExts_ = java.util.Collections.emptyList();
    mockServices_ = java.util.Collections.emptyList();
    protoBuilders_ = java.util.Collections.emptyList();
    extendableMessages_ = java.util.Collections.emptyList();
    insertions_ = java.util.Collections.emptyList();
    generatorScripts_ = java.util.Collections.emptyList();
    grpcCoroutines_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CompilerConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CompilerConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 162: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              grpcStubExts_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions>();
              mutable_bitField0_ |= 0x00000001;
            }
            grpcStubExts_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.parser(), extensionRegistry));
            break;
          }
          case 170: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              mockServices_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.MockServicesGenOptions>();
              mutable_bitField0_ |= 0x00000002;
            }
            mockServices_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.parser(), extensionRegistry));
            break;
          }
          case 178: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              protoBuilders_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions>();
              mutable_bitField0_ |= 0x00000004;
            }
            protoBuilders_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.parser(), extensionRegistry));
            break;
          }
          case 186: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              extendableMessages_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions>();
              mutable_bitField0_ |= 0x00000008;
            }
            extendableMessages_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.parser(), extensionRegistry));
            break;
          }
          case 194: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              insertions_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions>();
              mutable_bitField0_ |= 0x00000010;
            }
            insertions_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.parser(), extensionRegistry));
            break;
          }
          case 202: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              generatorScripts_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions>();
              mutable_bitField0_ |= 0x00000020;
            }
            generatorScripts_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.parser(), extensionRegistry));
            break;
          }
          case 210: {
            if (!((mutable_bitField0_ & 0x00000040) != 0)) {
              grpcCoroutines_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions>();
              mutable_bitField0_ |= 0x00000040;
            }
            grpcCoroutines_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        grpcStubExts_ = java.util.Collections.unmodifiableList(grpcStubExts_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        mockServices_ = java.util.Collections.unmodifiableList(mockServices_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        protoBuilders_ = java.util.Collections.unmodifiableList(protoBuilders_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        extendableMessages_ = java.util.Collections.unmodifiableList(extendableMessages_);
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        insertions_ = java.util.Collections.unmodifiableList(insertions_);
      }
      if (((mutable_bitField0_ & 0x00000020) != 0)) {
        generatorScripts_ = java.util.Collections.unmodifiableList(generatorScripts_);
      }
      if (((mutable_bitField0_ & 0x00000040) != 0)) {
        grpcCoroutines_ = java.util.Collections.unmodifiableList(grpcCoroutines_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_CompilerConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_CompilerConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.marcoferrer.krotoplus.config.CompilerConfig.class, com.github.marcoferrer.krotoplus.config.CompilerConfig.Builder.class);
  }

  public static final int GRPC_STUB_EXTS_FIELD_NUMBER = 20;
  private java.util.List<com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions> grpcStubExts_;
  /**
   * <pre>
   * Configuration entries for the 'gRPC Stub Extensions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions> getGrpcStubExtsList() {
    return grpcStubExts_;
  }
  /**
   * <pre>
   * Configuration entries for the 'gRPC Stub Extensions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptionsOrBuilder> 
      getGrpcStubExtsOrBuilderList() {
    return grpcStubExts_;
  }
  /**
   * <pre>
   * Configuration entries for the 'gRPC Stub Extensions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
   */
  public int getGrpcStubExtsCount() {
    return grpcStubExts_.size();
  }
  /**
   * <pre>
   * Configuration entries for the 'gRPC Stub Extensions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
   */
  public com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions getGrpcStubExts(int index) {
    return grpcStubExts_.get(index);
  }
  /**
   * <pre>
   * Configuration entries for the 'gRPC Stub Extensions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
   */
  public com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptionsOrBuilder getGrpcStubExtsOrBuilder(
      int index) {
    return grpcStubExts_.get(index);
  }

  public static final int MOCK_SERVICES_FIELD_NUMBER = 21;
  private java.util.List<com.github.marcoferrer.krotoplus.config.MockServicesGenOptions> mockServices_;
  /**
   * <pre>
   * Configuration entries for the 'Mock Service' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.MockServicesGenOptions> getMockServicesList() {
    return mockServices_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Mock Service' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.MockServicesGenOptionsOrBuilder> 
      getMockServicesOrBuilderList() {
    return mockServices_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Mock Service' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
   */
  public int getMockServicesCount() {
    return mockServices_.size();
  }
  /**
   * <pre>
   * Configuration entries for the 'Mock Service' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
   */
  public com.github.marcoferrer.krotoplus.config.MockServicesGenOptions getMockServices(int index) {
    return mockServices_.get(index);
  }
  /**
   * <pre>
   * Configuration entries for the 'Mock Service' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
   */
  public com.github.marcoferrer.krotoplus.config.MockServicesGenOptionsOrBuilder getMockServicesOrBuilder(
      int index) {
    return mockServices_.get(index);
  }

  public static final int PROTO_BUILDERS_FIELD_NUMBER = 22;
  private java.util.List<com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions> protoBuilders_;
  /**
   * <pre>
   * Configuration entries for the 'Proto Builders' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions> getProtoBuildersList() {
    return protoBuilders_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Proto Builders' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptionsOrBuilder> 
      getProtoBuildersOrBuilderList() {
    return protoBuilders_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Proto Builders' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
   */
  public int getProtoBuildersCount() {
    return protoBuilders_.size();
  }
  /**
   * <pre>
   * Configuration entries for the 'Proto Builders' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
   */
  public com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions getProtoBuilders(int index) {
    return protoBuilders_.get(index);
  }
  /**
   * <pre>
   * Configuration entries for the 'Proto Builders' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
   */
  public com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptionsOrBuilder getProtoBuildersOrBuilder(
      int index) {
    return protoBuilders_.get(index);
  }

  public static final int EXTENDABLE_MESSAGES_FIELD_NUMBER = 23;
  private java.util.List<com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions> extendableMessages_;
  /**
   * <pre>
   * Configuration entries for the 'Extendable Messages' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions> getExtendableMessagesList() {
    return extendableMessages_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Extendable Messages' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptionsOrBuilder> 
      getExtendableMessagesOrBuilderList() {
    return extendableMessages_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Extendable Messages' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
   */
  public int getExtendableMessagesCount() {
    return extendableMessages_.size();
  }
  /**
   * <pre>
   * Configuration entries for the 'Extendable Messages' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
   */
  public com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions getExtendableMessages(int index) {
    return extendableMessages_.get(index);
  }
  /**
   * <pre>
   * Configuration entries for the 'Extendable Messages' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
   */
  public com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptionsOrBuilder getExtendableMessagesOrBuilder(
      int index) {
    return extendableMessages_.get(index);
  }

  public static final int INSERTIONS_FIELD_NUMBER = 24;
  private java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions> insertions_;
  /**
   * <pre>
   * Configuration entries for the 'Protoc Insertions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions> getInsertionsList() {
    return insertions_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Protoc Insertions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder> 
      getInsertionsOrBuilderList() {
    return insertions_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Protoc Insertions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
   */
  public int getInsertionsCount() {
    return insertions_.size();
  }
  /**
   * <pre>
   * Configuration entries for the 'Protoc Insertions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
   */
  public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions getInsertions(int index) {
    return insertions_.get(index);
  }
  /**
   * <pre>
   * Configuration entries for the 'Protoc Insertions' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
   */
  public com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder getInsertionsOrBuilder(
      int index) {
    return insertions_.get(index);
  }

  public static final int GENERATOR_SCRIPTS_FIELD_NUMBER = 25;
  private java.util.List<com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions> generatorScripts_;
  /**
   * <pre>
   * Configuration entries for the 'Generator Scripts' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions> getGeneratorScriptsList() {
    return generatorScripts_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Generator Scripts' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptionsOrBuilder> 
      getGeneratorScriptsOrBuilderList() {
    return generatorScripts_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Generator Scripts' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
   */
  public int getGeneratorScriptsCount() {
    return generatorScripts_.size();
  }
  /**
   * <pre>
   * Configuration entries for the 'Generator Scripts' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
   */
  public com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions getGeneratorScripts(int index) {
    return generatorScripts_.get(index);
  }
  /**
   * <pre>
   * Configuration entries for the 'Generator Scripts' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
   */
  public com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptionsOrBuilder getGeneratorScriptsOrBuilder(
      int index) {
    return generatorScripts_.get(index);
  }

  public static final int GRPC_COROUTINES_FIELD_NUMBER = 26;
  private java.util.List<com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions> grpcCoroutines_;
  /**
   * <pre>
   * Configuration entries for the 'Grpc Coroutines' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions> getGrpcCoroutinesList() {
    return grpcCoroutines_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Grpc Coroutines' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptionsOrBuilder> 
      getGrpcCoroutinesOrBuilderList() {
    return grpcCoroutines_;
  }
  /**
   * <pre>
   * Configuration entries for the 'Grpc Coroutines' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
   */
  public int getGrpcCoroutinesCount() {
    return grpcCoroutines_.size();
  }
  /**
   * <pre>
   * Configuration entries for the 'Grpc Coroutines' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
   */
  public com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions getGrpcCoroutines(int index) {
    return grpcCoroutines_.get(index);
  }
  /**
   * <pre>
   * Configuration entries for the 'Grpc Coroutines' code generator.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
   */
  public com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptionsOrBuilder getGrpcCoroutinesOrBuilder(
      int index) {
    return grpcCoroutines_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < grpcStubExts_.size(); i++) {
      output.writeMessage(20, grpcStubExts_.get(i));
    }
    for (int i = 0; i < mockServices_.size(); i++) {
      output.writeMessage(21, mockServices_.get(i));
    }
    for (int i = 0; i < protoBuilders_.size(); i++) {
      output.writeMessage(22, protoBuilders_.get(i));
    }
    for (int i = 0; i < extendableMessages_.size(); i++) {
      output.writeMessage(23, extendableMessages_.get(i));
    }
    for (int i = 0; i < insertions_.size(); i++) {
      output.writeMessage(24, insertions_.get(i));
    }
    for (int i = 0; i < generatorScripts_.size(); i++) {
      output.writeMessage(25, generatorScripts_.get(i));
    }
    for (int i = 0; i < grpcCoroutines_.size(); i++) {
      output.writeMessage(26, grpcCoroutines_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < grpcStubExts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, grpcStubExts_.get(i));
    }
    for (int i = 0; i < mockServices_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, mockServices_.get(i));
    }
    for (int i = 0; i < protoBuilders_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, protoBuilders_.get(i));
    }
    for (int i = 0; i < extendableMessages_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, extendableMessages_.get(i));
    }
    for (int i = 0; i < insertions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, insertions_.get(i));
    }
    for (int i = 0; i < generatorScripts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, generatorScripts_.get(i));
    }
    for (int i = 0; i < grpcCoroutines_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, grpcCoroutines_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.marcoferrer.krotoplus.config.CompilerConfig)) {
      return super.equals(obj);
    }
    com.github.marcoferrer.krotoplus.config.CompilerConfig other = (com.github.marcoferrer.krotoplus.config.CompilerConfig) obj;

    if (!getGrpcStubExtsList()
        .equals(other.getGrpcStubExtsList())) return false;
    if (!getMockServicesList()
        .equals(other.getMockServicesList())) return false;
    if (!getProtoBuildersList()
        .equals(other.getProtoBuildersList())) return false;
    if (!getExtendableMessagesList()
        .equals(other.getExtendableMessagesList())) return false;
    if (!getInsertionsList()
        .equals(other.getInsertionsList())) return false;
    if (!getGeneratorScriptsList()
        .equals(other.getGeneratorScriptsList())) return false;
    if (!getGrpcCoroutinesList()
        .equals(other.getGrpcCoroutinesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getGrpcStubExtsCount() > 0) {
      hash = (37 * hash) + GRPC_STUB_EXTS_FIELD_NUMBER;
      hash = (53 * hash) + getGrpcStubExtsList().hashCode();
    }
    if (getMockServicesCount() > 0) {
      hash = (37 * hash) + MOCK_SERVICES_FIELD_NUMBER;
      hash = (53 * hash) + getMockServicesList().hashCode();
    }
    if (getProtoBuildersCount() > 0) {
      hash = (37 * hash) + PROTO_BUILDERS_FIELD_NUMBER;
      hash = (53 * hash) + getProtoBuildersList().hashCode();
    }
    if (getExtendableMessagesCount() > 0) {
      hash = (37 * hash) + EXTENDABLE_MESSAGES_FIELD_NUMBER;
      hash = (53 * hash) + getExtendableMessagesList().hashCode();
    }
    if (getInsertionsCount() > 0) {
      hash = (37 * hash) + INSERTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getInsertionsList().hashCode();
    }
    if (getGeneratorScriptsCount() > 0) {
      hash = (37 * hash) + GENERATOR_SCRIPTS_FIELD_NUMBER;
      hash = (53 * hash) + getGeneratorScriptsList().hashCode();
    }
    if (getGrpcCoroutinesCount() > 0) {
      hash = (37 * hash) + GRPC_COROUTINES_FIELD_NUMBER;
      hash = (53 * hash) + getGrpcCoroutinesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.marcoferrer.krotoplus.config.CompilerConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.marcoferrer.krotoplus.config.CompilerConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Message backing the root of a Kroto+ configuration file.
   * </pre>
   *
   * Protobuf type {@code krotoplus.compiler.CompilerConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:krotoplus.compiler.CompilerConfig)
      com.github.marcoferrer.krotoplus.config.CompilerConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_CompilerConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_CompilerConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.marcoferrer.krotoplus.config.CompilerConfig.class, com.github.marcoferrer.krotoplus.config.CompilerConfig.Builder.class);
    }

    // Construct using com.github.marcoferrer.krotoplus.config.CompilerConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getGrpcStubExtsFieldBuilder();
        getMockServicesFieldBuilder();
        getProtoBuildersFieldBuilder();
        getExtendableMessagesFieldBuilder();
        getInsertionsFieldBuilder();
        getGeneratorScriptsFieldBuilder();
        getGrpcCoroutinesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (grpcStubExtsBuilder_ == null) {
        grpcStubExts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        grpcStubExtsBuilder_.clear();
      }
      if (mockServicesBuilder_ == null) {
        mockServices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        mockServicesBuilder_.clear();
      }
      if (protoBuildersBuilder_ == null) {
        protoBuilders_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        protoBuildersBuilder_.clear();
      }
      if (extendableMessagesBuilder_ == null) {
        extendableMessages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        extendableMessagesBuilder_.clear();
      }
      if (insertionsBuilder_ == null) {
        insertions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        insertionsBuilder_.clear();
      }
      if (generatorScriptsBuilder_ == null) {
        generatorScripts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
      } else {
        generatorScriptsBuilder_.clear();
      }
      if (grpcCoroutinesBuilder_ == null) {
        grpcCoroutines_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
      } else {
        grpcCoroutinesBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_CompilerConfig_descriptor;
    }

    @java.lang.Override
    public com.github.marcoferrer.krotoplus.config.CompilerConfig getDefaultInstanceForType() {
      return com.github.marcoferrer.krotoplus.config.CompilerConfig.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.marcoferrer.krotoplus.config.CompilerConfig build() {
      com.github.marcoferrer.krotoplus.config.CompilerConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.marcoferrer.krotoplus.config.CompilerConfig buildPartial() {
      com.github.marcoferrer.krotoplus.config.CompilerConfig result = new com.github.marcoferrer.krotoplus.config.CompilerConfig(this);
      int from_bitField0_ = bitField0_;
      if (grpcStubExtsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          grpcStubExts_ = java.util.Collections.unmodifiableList(grpcStubExts_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.grpcStubExts_ = grpcStubExts_;
      } else {
        result.grpcStubExts_ = grpcStubExtsBuilder_.build();
      }
      if (mockServicesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          mockServices_ = java.util.Collections.unmodifiableList(mockServices_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.mockServices_ = mockServices_;
      } else {
        result.mockServices_ = mockServicesBuilder_.build();
      }
      if (protoBuildersBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          protoBuilders_ = java.util.Collections.unmodifiableList(protoBuilders_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.protoBuilders_ = protoBuilders_;
      } else {
        result.protoBuilders_ = protoBuildersBuilder_.build();
      }
      if (extendableMessagesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          extendableMessages_ = java.util.Collections.unmodifiableList(extendableMessages_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.extendableMessages_ = extendableMessages_;
      } else {
        result.extendableMessages_ = extendableMessagesBuilder_.build();
      }
      if (insertionsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          insertions_ = java.util.Collections.unmodifiableList(insertions_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.insertions_ = insertions_;
      } else {
        result.insertions_ = insertionsBuilder_.build();
      }
      if (generatorScriptsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          generatorScripts_ = java.util.Collections.unmodifiableList(generatorScripts_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.generatorScripts_ = generatorScripts_;
      } else {
        result.generatorScripts_ = generatorScriptsBuilder_.build();
      }
      if (grpcCoroutinesBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)) {
          grpcCoroutines_ = java.util.Collections.unmodifiableList(grpcCoroutines_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.grpcCoroutines_ = grpcCoroutines_;
      } else {
        result.grpcCoroutines_ = grpcCoroutinesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.marcoferrer.krotoplus.config.CompilerConfig) {
        return mergeFrom((com.github.marcoferrer.krotoplus.config.CompilerConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.marcoferrer.krotoplus.config.CompilerConfig other) {
      if (other == com.github.marcoferrer.krotoplus.config.CompilerConfig.getDefaultInstance()) return this;
      if (grpcStubExtsBuilder_ == null) {
        if (!other.grpcStubExts_.isEmpty()) {
          if (grpcStubExts_.isEmpty()) {
            grpcStubExts_ = other.grpcStubExts_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureGrpcStubExtsIsMutable();
            grpcStubExts_.addAll(other.grpcStubExts_);
          }
          onChanged();
        }
      } else {
        if (!other.grpcStubExts_.isEmpty()) {
          if (grpcStubExtsBuilder_.isEmpty()) {
            grpcStubExtsBuilder_.dispose();
            grpcStubExtsBuilder_ = null;
            grpcStubExts_ = other.grpcStubExts_;
            bitField0_ = (bitField0_ & ~0x00000001);
            grpcStubExtsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGrpcStubExtsFieldBuilder() : null;
          } else {
            grpcStubExtsBuilder_.addAllMessages(other.grpcStubExts_);
          }
        }
      }
      if (mockServicesBuilder_ == null) {
        if (!other.mockServices_.isEmpty()) {
          if (mockServices_.isEmpty()) {
            mockServices_ = other.mockServices_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureMockServicesIsMutable();
            mockServices_.addAll(other.mockServices_);
          }
          onChanged();
        }
      } else {
        if (!other.mockServices_.isEmpty()) {
          if (mockServicesBuilder_.isEmpty()) {
            mockServicesBuilder_.dispose();
            mockServicesBuilder_ = null;
            mockServices_ = other.mockServices_;
            bitField0_ = (bitField0_ & ~0x00000002);
            mockServicesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getMockServicesFieldBuilder() : null;
          } else {
            mockServicesBuilder_.addAllMessages(other.mockServices_);
          }
        }
      }
      if (protoBuildersBuilder_ == null) {
        if (!other.protoBuilders_.isEmpty()) {
          if (protoBuilders_.isEmpty()) {
            protoBuilders_ = other.protoBuilders_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureProtoBuildersIsMutable();
            protoBuilders_.addAll(other.protoBuilders_);
          }
          onChanged();
        }
      } else {
        if (!other.protoBuilders_.isEmpty()) {
          if (protoBuildersBuilder_.isEmpty()) {
            protoBuildersBuilder_.dispose();
            protoBuildersBuilder_ = null;
            protoBuilders_ = other.protoBuilders_;
            bitField0_ = (bitField0_ & ~0x00000004);
            protoBuildersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getProtoBuildersFieldBuilder() : null;
          } else {
            protoBuildersBuilder_.addAllMessages(other.protoBuilders_);
          }
        }
      }
      if (extendableMessagesBuilder_ == null) {
        if (!other.extendableMessages_.isEmpty()) {
          if (extendableMessages_.isEmpty()) {
            extendableMessages_ = other.extendableMessages_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureExtendableMessagesIsMutable();
            extendableMessages_.addAll(other.extendableMessages_);
          }
          onChanged();
        }
      } else {
        if (!other.extendableMessages_.isEmpty()) {
          if (extendableMessagesBuilder_.isEmpty()) {
            extendableMessagesBuilder_.dispose();
            extendableMessagesBuilder_ = null;
            extendableMessages_ = other.extendableMessages_;
            bitField0_ = (bitField0_ & ~0x00000008);
            extendableMessagesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getExtendableMessagesFieldBuilder() : null;
          } else {
            extendableMessagesBuilder_.addAllMessages(other.extendableMessages_);
          }
        }
      }
      if (insertionsBuilder_ == null) {
        if (!other.insertions_.isEmpty()) {
          if (insertions_.isEmpty()) {
            insertions_ = other.insertions_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureInsertionsIsMutable();
            insertions_.addAll(other.insertions_);
          }
          onChanged();
        }
      } else {
        if (!other.insertions_.isEmpty()) {
          if (insertionsBuilder_.isEmpty()) {
            insertionsBuilder_.dispose();
            insertionsBuilder_ = null;
            insertions_ = other.insertions_;
            bitField0_ = (bitField0_ & ~0x00000010);
            insertionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInsertionsFieldBuilder() : null;
          } else {
            insertionsBuilder_.addAllMessages(other.insertions_);
          }
        }
      }
      if (generatorScriptsBuilder_ == null) {
        if (!other.generatorScripts_.isEmpty()) {
          if (generatorScripts_.isEmpty()) {
            generatorScripts_ = other.generatorScripts_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureGeneratorScriptsIsMutable();
            generatorScripts_.addAll(other.generatorScripts_);
          }
          onChanged();
        }
      } else {
        if (!other.generatorScripts_.isEmpty()) {
          if (generatorScriptsBuilder_.isEmpty()) {
            generatorScriptsBuilder_.dispose();
            generatorScriptsBuilder_ = null;
            generatorScripts_ = other.generatorScripts_;
            bitField0_ = (bitField0_ & ~0x00000020);
            generatorScriptsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGeneratorScriptsFieldBuilder() : null;
          } else {
            generatorScriptsBuilder_.addAllMessages(other.generatorScripts_);
          }
        }
      }
      if (grpcCoroutinesBuilder_ == null) {
        if (!other.grpcCoroutines_.isEmpty()) {
          if (grpcCoroutines_.isEmpty()) {
            grpcCoroutines_ = other.grpcCoroutines_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureGrpcCoroutinesIsMutable();
            grpcCoroutines_.addAll(other.grpcCoroutines_);
          }
          onChanged();
        }
      } else {
        if (!other.grpcCoroutines_.isEmpty()) {
          if (grpcCoroutinesBuilder_.isEmpty()) {
            grpcCoroutinesBuilder_.dispose();
            grpcCoroutinesBuilder_ = null;
            grpcCoroutines_ = other.grpcCoroutines_;
            bitField0_ = (bitField0_ & ~0x00000040);
            grpcCoroutinesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGrpcCoroutinesFieldBuilder() : null;
          } else {
            grpcCoroutinesBuilder_.addAllMessages(other.grpcCoroutines_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.marcoferrer.krotoplus.config.CompilerConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.marcoferrer.krotoplus.config.CompilerConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions> grpcStubExts_ =
      java.util.Collections.emptyList();
    private void ensureGrpcStubExtsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        grpcStubExts_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions>(grpcStubExts_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptionsOrBuilder> grpcStubExtsBuilder_;

    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions> getGrpcStubExtsList() {
      if (grpcStubExtsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(grpcStubExts_);
      } else {
        return grpcStubExtsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public int getGrpcStubExtsCount() {
      if (grpcStubExtsBuilder_ == null) {
        return grpcStubExts_.size();
      } else {
        return grpcStubExtsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions getGrpcStubExts(int index) {
      if (grpcStubExtsBuilder_ == null) {
        return grpcStubExts_.get(index);
      } else {
        return grpcStubExtsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder setGrpcStubExts(
        int index, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions value) {
      if (grpcStubExtsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrpcStubExtsIsMutable();
        grpcStubExts_.set(index, value);
        onChanged();
      } else {
        grpcStubExtsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder setGrpcStubExts(
        int index, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder builderForValue) {
      if (grpcStubExtsBuilder_ == null) {
        ensureGrpcStubExtsIsMutable();
        grpcStubExts_.set(index, builderForValue.build());
        onChanged();
      } else {
        grpcStubExtsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder addGrpcStubExts(com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions value) {
      if (grpcStubExtsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrpcStubExtsIsMutable();
        grpcStubExts_.add(value);
        onChanged();
      } else {
        grpcStubExtsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder addGrpcStubExts(
        int index, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions value) {
      if (grpcStubExtsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrpcStubExtsIsMutable();
        grpcStubExts_.add(index, value);
        onChanged();
      } else {
        grpcStubExtsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder addGrpcStubExts(
        com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder builderForValue) {
      if (grpcStubExtsBuilder_ == null) {
        ensureGrpcStubExtsIsMutable();
        grpcStubExts_.add(builderForValue.build());
        onChanged();
      } else {
        grpcStubExtsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder addGrpcStubExts(
        int index, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder builderForValue) {
      if (grpcStubExtsBuilder_ == null) {
        ensureGrpcStubExtsIsMutable();
        grpcStubExts_.add(index, builderForValue.build());
        onChanged();
      } else {
        grpcStubExtsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder addAllGrpcStubExts(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions> values) {
      if (grpcStubExtsBuilder_ == null) {
        ensureGrpcStubExtsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, grpcStubExts_);
        onChanged();
      } else {
        grpcStubExtsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder clearGrpcStubExts() {
      if (grpcStubExtsBuilder_ == null) {
        grpcStubExts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        grpcStubExtsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public Builder removeGrpcStubExts(int index) {
      if (grpcStubExtsBuilder_ == null) {
        ensureGrpcStubExtsIsMutable();
        grpcStubExts_.remove(index);
        onChanged();
      } else {
        grpcStubExtsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder getGrpcStubExtsBuilder(
        int index) {
      return getGrpcStubExtsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptionsOrBuilder getGrpcStubExtsOrBuilder(
        int index) {
      if (grpcStubExtsBuilder_ == null) {
        return grpcStubExts_.get(index);  } else {
        return grpcStubExtsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptionsOrBuilder> 
         getGrpcStubExtsOrBuilderList() {
      if (grpcStubExtsBuilder_ != null) {
        return grpcStubExtsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(grpcStubExts_);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder addGrpcStubExtsBuilder() {
      return getGrpcStubExtsFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder addGrpcStubExtsBuilder(
        int index) {
      return getGrpcStubExtsFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'gRPC Stub Extensions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcStubExtsGenOptions grpc_stub_exts = 20;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder> 
         getGrpcStubExtsBuilderList() {
      return getGrpcStubExtsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptionsOrBuilder> 
        getGrpcStubExtsFieldBuilder() {
      if (grpcStubExtsBuilder_ == null) {
        grpcStubExtsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GrpcStubExtsGenOptionsOrBuilder>(
                grpcStubExts_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        grpcStubExts_ = null;
      }
      return grpcStubExtsBuilder_;
    }

    private java.util.List<com.github.marcoferrer.krotoplus.config.MockServicesGenOptions> mockServices_ =
      java.util.Collections.emptyList();
    private void ensureMockServicesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        mockServices_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.MockServicesGenOptions>(mockServices_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.MockServicesGenOptions, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.MockServicesGenOptionsOrBuilder> mockServicesBuilder_;

    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.MockServicesGenOptions> getMockServicesList() {
      if (mockServicesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(mockServices_);
      } else {
        return mockServicesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public int getMockServicesCount() {
      if (mockServicesBuilder_ == null) {
        return mockServices_.size();
      } else {
        return mockServicesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public com.github.marcoferrer.krotoplus.config.MockServicesGenOptions getMockServices(int index) {
      if (mockServicesBuilder_ == null) {
        return mockServices_.get(index);
      } else {
        return mockServicesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder setMockServices(
        int index, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions value) {
      if (mockServicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMockServicesIsMutable();
        mockServices_.set(index, value);
        onChanged();
      } else {
        mockServicesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder setMockServices(
        int index, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder builderForValue) {
      if (mockServicesBuilder_ == null) {
        ensureMockServicesIsMutable();
        mockServices_.set(index, builderForValue.build());
        onChanged();
      } else {
        mockServicesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder addMockServices(com.github.marcoferrer.krotoplus.config.MockServicesGenOptions value) {
      if (mockServicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMockServicesIsMutable();
        mockServices_.add(value);
        onChanged();
      } else {
        mockServicesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder addMockServices(
        int index, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions value) {
      if (mockServicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMockServicesIsMutable();
        mockServices_.add(index, value);
        onChanged();
      } else {
        mockServicesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder addMockServices(
        com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder builderForValue) {
      if (mockServicesBuilder_ == null) {
        ensureMockServicesIsMutable();
        mockServices_.add(builderForValue.build());
        onChanged();
      } else {
        mockServicesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder addMockServices(
        int index, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder builderForValue) {
      if (mockServicesBuilder_ == null) {
        ensureMockServicesIsMutable();
        mockServices_.add(index, builderForValue.build());
        onChanged();
      } else {
        mockServicesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder addAllMockServices(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.MockServicesGenOptions> values) {
      if (mockServicesBuilder_ == null) {
        ensureMockServicesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, mockServices_);
        onChanged();
      } else {
        mockServicesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder clearMockServices() {
      if (mockServicesBuilder_ == null) {
        mockServices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        mockServicesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public Builder removeMockServices(int index) {
      if (mockServicesBuilder_ == null) {
        ensureMockServicesIsMutable();
        mockServices_.remove(index);
        onChanged();
      } else {
        mockServicesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder getMockServicesBuilder(
        int index) {
      return getMockServicesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public com.github.marcoferrer.krotoplus.config.MockServicesGenOptionsOrBuilder getMockServicesOrBuilder(
        int index) {
      if (mockServicesBuilder_ == null) {
        return mockServices_.get(index);  } else {
        return mockServicesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.MockServicesGenOptionsOrBuilder> 
         getMockServicesOrBuilderList() {
      if (mockServicesBuilder_ != null) {
        return mockServicesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(mockServices_);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder addMockServicesBuilder() {
      return getMockServicesFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder addMockServicesBuilder(
        int index) {
      return getMockServicesFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Mock Service' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.MockServicesGenOptions mock_services = 21;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder> 
         getMockServicesBuilderList() {
      return getMockServicesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.MockServicesGenOptions, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.MockServicesGenOptionsOrBuilder> 
        getMockServicesFieldBuilder() {
      if (mockServicesBuilder_ == null) {
        mockServicesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.MockServicesGenOptions, com.github.marcoferrer.krotoplus.config.MockServicesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.MockServicesGenOptionsOrBuilder>(
                mockServices_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        mockServices_ = null;
      }
      return mockServicesBuilder_;
    }

    private java.util.List<com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions> protoBuilders_ =
      java.util.Collections.emptyList();
    private void ensureProtoBuildersIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        protoBuilders_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions>(protoBuilders_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptionsOrBuilder> protoBuildersBuilder_;

    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions> getProtoBuildersList() {
      if (protoBuildersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(protoBuilders_);
      } else {
        return protoBuildersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public int getProtoBuildersCount() {
      if (protoBuildersBuilder_ == null) {
        return protoBuilders_.size();
      } else {
        return protoBuildersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions getProtoBuilders(int index) {
      if (protoBuildersBuilder_ == null) {
        return protoBuilders_.get(index);
      } else {
        return protoBuildersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder setProtoBuilders(
        int index, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions value) {
      if (protoBuildersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProtoBuildersIsMutable();
        protoBuilders_.set(index, value);
        onChanged();
      } else {
        protoBuildersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder setProtoBuilders(
        int index, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder builderForValue) {
      if (protoBuildersBuilder_ == null) {
        ensureProtoBuildersIsMutable();
        protoBuilders_.set(index, builderForValue.build());
        onChanged();
      } else {
        protoBuildersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder addProtoBuilders(com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions value) {
      if (protoBuildersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProtoBuildersIsMutable();
        protoBuilders_.add(value);
        onChanged();
      } else {
        protoBuildersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder addProtoBuilders(
        int index, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions value) {
      if (protoBuildersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProtoBuildersIsMutable();
        protoBuilders_.add(index, value);
        onChanged();
      } else {
        protoBuildersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder addProtoBuilders(
        com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder builderForValue) {
      if (protoBuildersBuilder_ == null) {
        ensureProtoBuildersIsMutable();
        protoBuilders_.add(builderForValue.build());
        onChanged();
      } else {
        protoBuildersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder addProtoBuilders(
        int index, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder builderForValue) {
      if (protoBuildersBuilder_ == null) {
        ensureProtoBuildersIsMutable();
        protoBuilders_.add(index, builderForValue.build());
        onChanged();
      } else {
        protoBuildersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder addAllProtoBuilders(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions> values) {
      if (protoBuildersBuilder_ == null) {
        ensureProtoBuildersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, protoBuilders_);
        onChanged();
      } else {
        protoBuildersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder clearProtoBuilders() {
      if (protoBuildersBuilder_ == null) {
        protoBuilders_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        protoBuildersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public Builder removeProtoBuilders(int index) {
      if (protoBuildersBuilder_ == null) {
        ensureProtoBuildersIsMutable();
        protoBuilders_.remove(index);
        onChanged();
      } else {
        protoBuildersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder getProtoBuildersBuilder(
        int index) {
      return getProtoBuildersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptionsOrBuilder getProtoBuildersOrBuilder(
        int index) {
      if (protoBuildersBuilder_ == null) {
        return protoBuilders_.get(index);  } else {
        return protoBuildersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptionsOrBuilder> 
         getProtoBuildersOrBuilderList() {
      if (protoBuildersBuilder_ != null) {
        return protoBuildersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(protoBuilders_);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder addProtoBuildersBuilder() {
      return getProtoBuildersFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder addProtoBuildersBuilder(
        int index) {
      return getProtoBuildersFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Proto Builders' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ProtoBuildersGenOptions proto_builders = 22;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder> 
         getProtoBuildersBuilderList() {
      return getProtoBuildersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptionsOrBuilder> 
        getProtoBuildersFieldBuilder() {
      if (protoBuildersBuilder_ == null) {
        protoBuildersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptions.Builder, com.github.marcoferrer.krotoplus.config.ProtoBuildersGenOptionsOrBuilder>(
                protoBuilders_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        protoBuilders_ = null;
      }
      return protoBuildersBuilder_;
    }

    private java.util.List<com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions> extendableMessages_ =
      java.util.Collections.emptyList();
    private void ensureExtendableMessagesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        extendableMessages_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions>(extendableMessages_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptionsOrBuilder> extendableMessagesBuilder_;

    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions> getExtendableMessagesList() {
      if (extendableMessagesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(extendableMessages_);
      } else {
        return extendableMessagesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public int getExtendableMessagesCount() {
      if (extendableMessagesBuilder_ == null) {
        return extendableMessages_.size();
      } else {
        return extendableMessagesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions getExtendableMessages(int index) {
      if (extendableMessagesBuilder_ == null) {
        return extendableMessages_.get(index);
      } else {
        return extendableMessagesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder setExtendableMessages(
        int index, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions value) {
      if (extendableMessagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtendableMessagesIsMutable();
        extendableMessages_.set(index, value);
        onChanged();
      } else {
        extendableMessagesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder setExtendableMessages(
        int index, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder builderForValue) {
      if (extendableMessagesBuilder_ == null) {
        ensureExtendableMessagesIsMutable();
        extendableMessages_.set(index, builderForValue.build());
        onChanged();
      } else {
        extendableMessagesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder addExtendableMessages(com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions value) {
      if (extendableMessagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtendableMessagesIsMutable();
        extendableMessages_.add(value);
        onChanged();
      } else {
        extendableMessagesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder addExtendableMessages(
        int index, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions value) {
      if (extendableMessagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtendableMessagesIsMutable();
        extendableMessages_.add(index, value);
        onChanged();
      } else {
        extendableMessagesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder addExtendableMessages(
        com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder builderForValue) {
      if (extendableMessagesBuilder_ == null) {
        ensureExtendableMessagesIsMutable();
        extendableMessages_.add(builderForValue.build());
        onChanged();
      } else {
        extendableMessagesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder addExtendableMessages(
        int index, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder builderForValue) {
      if (extendableMessagesBuilder_ == null) {
        ensureExtendableMessagesIsMutable();
        extendableMessages_.add(index, builderForValue.build());
        onChanged();
      } else {
        extendableMessagesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder addAllExtendableMessages(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions> values) {
      if (extendableMessagesBuilder_ == null) {
        ensureExtendableMessagesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extendableMessages_);
        onChanged();
      } else {
        extendableMessagesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder clearExtendableMessages() {
      if (extendableMessagesBuilder_ == null) {
        extendableMessages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        extendableMessagesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public Builder removeExtendableMessages(int index) {
      if (extendableMessagesBuilder_ == null) {
        ensureExtendableMessagesIsMutable();
        extendableMessages_.remove(index);
        onChanged();
      } else {
        extendableMessagesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder getExtendableMessagesBuilder(
        int index) {
      return getExtendableMessagesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptionsOrBuilder getExtendableMessagesOrBuilder(
        int index) {
      if (extendableMessagesBuilder_ == null) {
        return extendableMessages_.get(index);  } else {
        return extendableMessagesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptionsOrBuilder> 
         getExtendableMessagesOrBuilderList() {
      if (extendableMessagesBuilder_ != null) {
        return extendableMessagesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(extendableMessages_);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder addExtendableMessagesBuilder() {
      return getExtendableMessagesFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder addExtendableMessagesBuilder(
        int index) {
      return getExtendableMessagesFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Extendable Messages' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.ExtendableMessagesGenOptions extendable_messages = 23;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder> 
         getExtendableMessagesBuilderList() {
      return getExtendableMessagesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptionsOrBuilder> 
        getExtendableMessagesFieldBuilder() {
      if (extendableMessagesBuilder_ == null) {
        extendableMessagesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.ExtendableMessagesGenOptionsOrBuilder>(
                extendableMessages_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        extendableMessages_ = null;
      }
      return extendableMessagesBuilder_;
    }

    private java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions> insertions_ =
      java.util.Collections.emptyList();
    private void ensureInsertionsIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        insertions_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions>(insertions_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder> insertionsBuilder_;

    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions> getInsertionsList() {
      if (insertionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(insertions_);
      } else {
        return insertionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public int getInsertionsCount() {
      if (insertionsBuilder_ == null) {
        return insertions_.size();
      } else {
        return insertionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions getInsertions(int index) {
      if (insertionsBuilder_ == null) {
        return insertions_.get(index);
      } else {
        return insertionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder setInsertions(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions value) {
      if (insertionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInsertionsIsMutable();
        insertions_.set(index, value);
        onChanged();
      } else {
        insertionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder setInsertions(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder builderForValue) {
      if (insertionsBuilder_ == null) {
        ensureInsertionsIsMutable();
        insertions_.set(index, builderForValue.build());
        onChanged();
      } else {
        insertionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder addInsertions(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions value) {
      if (insertionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInsertionsIsMutable();
        insertions_.add(value);
        onChanged();
      } else {
        insertionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder addInsertions(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions value) {
      if (insertionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInsertionsIsMutable();
        insertions_.add(index, value);
        onChanged();
      } else {
        insertionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder addInsertions(
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder builderForValue) {
      if (insertionsBuilder_ == null) {
        ensureInsertionsIsMutable();
        insertions_.add(builderForValue.build());
        onChanged();
      } else {
        insertionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder addInsertions(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder builderForValue) {
      if (insertionsBuilder_ == null) {
        ensureInsertionsIsMutable();
        insertions_.add(index, builderForValue.build());
        onChanged();
      } else {
        insertionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder addAllInsertions(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.InsertionsGenOptions> values) {
      if (insertionsBuilder_ == null) {
        ensureInsertionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, insertions_);
        onChanged();
      } else {
        insertionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder clearInsertions() {
      if (insertionsBuilder_ == null) {
        insertions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        insertionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public Builder removeInsertions(int index) {
      if (insertionsBuilder_ == null) {
        ensureInsertionsIsMutable();
        insertions_.remove(index);
        onChanged();
      } else {
        insertionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder getInsertionsBuilder(
        int index) {
      return getInsertionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder getInsertionsOrBuilder(
        int index) {
      if (insertionsBuilder_ == null) {
        return insertions_.get(index);  } else {
        return insertionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder> 
         getInsertionsOrBuilderList() {
      if (insertionsBuilder_ != null) {
        return insertionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(insertions_);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder addInsertionsBuilder() {
      return getInsertionsFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder addInsertionsBuilder(
        int index) {
      return getInsertionsFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Protoc Insertions' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions insertions = 24;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder> 
         getInsertionsBuilderList() {
      return getInsertionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder> 
        getInsertionsFieldBuilder() {
      if (insertionsBuilder_ == null) {
        insertionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.InsertionsGenOptions, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder>(
                insertions_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        insertions_ = null;
      }
      return insertionsBuilder_;
    }

    private java.util.List<com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions> generatorScripts_ =
      java.util.Collections.emptyList();
    private void ensureGeneratorScriptsIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        generatorScripts_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions>(generatorScripts_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptionsOrBuilder> generatorScriptsBuilder_;

    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions> getGeneratorScriptsList() {
      if (generatorScriptsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(generatorScripts_);
      } else {
        return generatorScriptsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public int getGeneratorScriptsCount() {
      if (generatorScriptsBuilder_ == null) {
        return generatorScripts_.size();
      } else {
        return generatorScriptsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions getGeneratorScripts(int index) {
      if (generatorScriptsBuilder_ == null) {
        return generatorScripts_.get(index);
      } else {
        return generatorScriptsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder setGeneratorScripts(
        int index, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions value) {
      if (generatorScriptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGeneratorScriptsIsMutable();
        generatorScripts_.set(index, value);
        onChanged();
      } else {
        generatorScriptsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder setGeneratorScripts(
        int index, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder builderForValue) {
      if (generatorScriptsBuilder_ == null) {
        ensureGeneratorScriptsIsMutable();
        generatorScripts_.set(index, builderForValue.build());
        onChanged();
      } else {
        generatorScriptsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder addGeneratorScripts(com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions value) {
      if (generatorScriptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGeneratorScriptsIsMutable();
        generatorScripts_.add(value);
        onChanged();
      } else {
        generatorScriptsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder addGeneratorScripts(
        int index, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions value) {
      if (generatorScriptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGeneratorScriptsIsMutable();
        generatorScripts_.add(index, value);
        onChanged();
      } else {
        generatorScriptsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder addGeneratorScripts(
        com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder builderForValue) {
      if (generatorScriptsBuilder_ == null) {
        ensureGeneratorScriptsIsMutable();
        generatorScripts_.add(builderForValue.build());
        onChanged();
      } else {
        generatorScriptsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder addGeneratorScripts(
        int index, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder builderForValue) {
      if (generatorScriptsBuilder_ == null) {
        ensureGeneratorScriptsIsMutable();
        generatorScripts_.add(index, builderForValue.build());
        onChanged();
      } else {
        generatorScriptsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder addAllGeneratorScripts(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions> values) {
      if (generatorScriptsBuilder_ == null) {
        ensureGeneratorScriptsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, generatorScripts_);
        onChanged();
      } else {
        generatorScriptsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder clearGeneratorScripts() {
      if (generatorScriptsBuilder_ == null) {
        generatorScripts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        generatorScriptsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public Builder removeGeneratorScripts(int index) {
      if (generatorScriptsBuilder_ == null) {
        ensureGeneratorScriptsIsMutable();
        generatorScripts_.remove(index);
        onChanged();
      } else {
        generatorScriptsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder getGeneratorScriptsBuilder(
        int index) {
      return getGeneratorScriptsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptionsOrBuilder getGeneratorScriptsOrBuilder(
        int index) {
      if (generatorScriptsBuilder_ == null) {
        return generatorScripts_.get(index);  } else {
        return generatorScriptsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptionsOrBuilder> 
         getGeneratorScriptsOrBuilderList() {
      if (generatorScriptsBuilder_ != null) {
        return generatorScriptsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(generatorScripts_);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder addGeneratorScriptsBuilder() {
      return getGeneratorScriptsFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder addGeneratorScriptsBuilder(
        int index) {
      return getGeneratorScriptsFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Generator Scripts' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GeneratorScriptsGenOptions generator_scripts = 25;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder> 
         getGeneratorScriptsBuilderList() {
      return getGeneratorScriptsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptionsOrBuilder> 
        getGeneratorScriptsFieldBuilder() {
      if (generatorScriptsBuilder_ == null) {
        generatorScriptsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GeneratorScriptsGenOptionsOrBuilder>(
                generatorScripts_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        generatorScripts_ = null;
      }
      return generatorScriptsBuilder_;
    }

    private java.util.List<com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions> grpcCoroutines_ =
      java.util.Collections.emptyList();
    private void ensureGrpcCoroutinesIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        grpcCoroutines_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions>(grpcCoroutines_);
        bitField0_ |= 0x00000040;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptionsOrBuilder> grpcCoroutinesBuilder_;

    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions> getGrpcCoroutinesList() {
      if (grpcCoroutinesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(grpcCoroutines_);
      } else {
        return grpcCoroutinesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public int getGrpcCoroutinesCount() {
      if (grpcCoroutinesBuilder_ == null) {
        return grpcCoroutines_.size();
      } else {
        return grpcCoroutinesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions getGrpcCoroutines(int index) {
      if (grpcCoroutinesBuilder_ == null) {
        return grpcCoroutines_.get(index);
      } else {
        return grpcCoroutinesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder setGrpcCoroutines(
        int index, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions value) {
      if (grpcCoroutinesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrpcCoroutinesIsMutable();
        grpcCoroutines_.set(index, value);
        onChanged();
      } else {
        grpcCoroutinesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder setGrpcCoroutines(
        int index, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder builderForValue) {
      if (grpcCoroutinesBuilder_ == null) {
        ensureGrpcCoroutinesIsMutable();
        grpcCoroutines_.set(index, builderForValue.build());
        onChanged();
      } else {
        grpcCoroutinesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder addGrpcCoroutines(com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions value) {
      if (grpcCoroutinesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrpcCoroutinesIsMutable();
        grpcCoroutines_.add(value);
        onChanged();
      } else {
        grpcCoroutinesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder addGrpcCoroutines(
        int index, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions value) {
      if (grpcCoroutinesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrpcCoroutinesIsMutable();
        grpcCoroutines_.add(index, value);
        onChanged();
      } else {
        grpcCoroutinesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder addGrpcCoroutines(
        com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder builderForValue) {
      if (grpcCoroutinesBuilder_ == null) {
        ensureGrpcCoroutinesIsMutable();
        grpcCoroutines_.add(builderForValue.build());
        onChanged();
      } else {
        grpcCoroutinesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder addGrpcCoroutines(
        int index, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder builderForValue) {
      if (grpcCoroutinesBuilder_ == null) {
        ensureGrpcCoroutinesIsMutable();
        grpcCoroutines_.add(index, builderForValue.build());
        onChanged();
      } else {
        grpcCoroutinesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder addAllGrpcCoroutines(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions> values) {
      if (grpcCoroutinesBuilder_ == null) {
        ensureGrpcCoroutinesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, grpcCoroutines_);
        onChanged();
      } else {
        grpcCoroutinesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder clearGrpcCoroutines() {
      if (grpcCoroutinesBuilder_ == null) {
        grpcCoroutines_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
      } else {
        grpcCoroutinesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public Builder removeGrpcCoroutines(int index) {
      if (grpcCoroutinesBuilder_ == null) {
        ensureGrpcCoroutinesIsMutable();
        grpcCoroutines_.remove(index);
        onChanged();
      } else {
        grpcCoroutinesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder getGrpcCoroutinesBuilder(
        int index) {
      return getGrpcCoroutinesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptionsOrBuilder getGrpcCoroutinesOrBuilder(
        int index) {
      if (grpcCoroutinesBuilder_ == null) {
        return grpcCoroutines_.get(index);  } else {
        return grpcCoroutinesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptionsOrBuilder> 
         getGrpcCoroutinesOrBuilderList() {
      if (grpcCoroutinesBuilder_ != null) {
        return grpcCoroutinesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(grpcCoroutines_);
      }
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder addGrpcCoroutinesBuilder() {
      return getGrpcCoroutinesFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder addGrpcCoroutinesBuilder(
        int index) {
      return getGrpcCoroutinesFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration entries for the 'Grpc Coroutines' code generator.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.GrpcCoroutinesGenOptions grpc_coroutines = 26;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder> 
         getGrpcCoroutinesBuilderList() {
      return getGrpcCoroutinesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptionsOrBuilder> 
        getGrpcCoroutinesFieldBuilder() {
      if (grpcCoroutinesBuilder_ == null) {
        grpcCoroutinesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptions.Builder, com.github.marcoferrer.krotoplus.config.GrpcCoroutinesGenOptionsOrBuilder>(
                grpcCoroutines_,
                ((bitField0_ & 0x00000040) != 0),
                getParentForChildren(),
                isClean());
        grpcCoroutines_ = null;
      }
      return grpcCoroutinesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:krotoplus.compiler.CompilerConfig)
  }

  // @@protoc_insertion_point(class_scope:krotoplus.compiler.CompilerConfig)
  private static final com.github.marcoferrer.krotoplus.config.CompilerConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.marcoferrer.krotoplus.config.CompilerConfig();
  }

  public static com.github.marcoferrer.krotoplus.config.CompilerConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CompilerConfig>
      PARSER = new com.google.protobuf.AbstractParser<CompilerConfig>() {
    @java.lang.Override
    public CompilerConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CompilerConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CompilerConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CompilerConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.marcoferrer.krotoplus.config.CompilerConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

