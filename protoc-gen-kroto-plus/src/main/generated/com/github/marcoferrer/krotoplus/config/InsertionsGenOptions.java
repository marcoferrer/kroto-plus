// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: krotoplus/compiler/config.proto

package com.github.marcoferrer.krotoplus.config;

/**
 * <pre>
 * Configuration used by the 'Protoc Insertions' code generator.
 * Since this code generator relies on the protoc insertion point API,
 * its outputDir must match that of the protoc java plugin.
 * </pre>
 *
 * Protobuf type {@code krotoplus.compiler.InsertionsGenOptions}
 */
public  final class InsertionsGenOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:krotoplus.compiler.InsertionsGenOptions)
    InsertionsGenOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InsertionsGenOptions.newBuilder() to construct.
  private InsertionsGenOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InsertionsGenOptions() {
    entry_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new InsertionsGenOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InsertionsGenOptions(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.github.marcoferrer.krotoplus.config.FileFilter.Builder subBuilder = null;
            if (filter_ != null) {
              subBuilder = filter_.toBuilder();
            }
            filter_ = input.readMessage(com.github.marcoferrer.krotoplus.config.FileFilter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(filter_);
              filter_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              entry_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry>();
              mutable_bitField0_ |= 0x00000001;
            }
            entry_.add(
                input.readMessage(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        entry_ = java.util.Collections.unmodifiableList(entry_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.class, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder.class);
  }

  public interface EntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:krotoplus.compiler.InsertionsGenOptions.Entry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The protoc insertion point at which the generated code will be inserted.
     * </pre>
     *
     * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
     */
    int getPointValue();
    /**
     * <pre>
     * The protoc insertion point at which the generated code will be inserted.
     * </pre>
     *
     * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
     */
    com.github.marcoferrer.krotoplus.config.InsertionPoint getPoint();

    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    java.util.List<java.lang.String>
        getContentList();
    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    int getContentCount();
    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    java.lang.String getContent(int index);
    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    com.google.protobuf.ByteString
        getContentBytes(int index);

    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    java.util.List<java.lang.String>
        getScriptPathList();
    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    int getScriptPathCount();
    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    java.lang.String getScriptPath(int index);
    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    com.google.protobuf.ByteString
        getScriptPathBytes(int index);

    /**
     * <pre>
     * Path to the jar containing precompile scripts.
     * </pre>
     *
     * <code>string script_bundle = 4;</code>
     */
    java.lang.String getScriptBundle();
    /**
     * <pre>
     * Path to the jar containing precompile scripts.
     * </pre>
     *
     * <code>string script_bundle = 4;</code>
     */
    com.google.protobuf.ByteString
        getScriptBundleBytes();
  }
  /**
   * <pre>
   * Configuration to apply to the files matched by the file filter.
   * </pre>
   *
   * Protobuf type {@code krotoplus.compiler.InsertionsGenOptions.Entry}
   */
  public  static final class Entry extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:krotoplus.compiler.InsertionsGenOptions.Entry)
      EntryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Entry.newBuilder() to construct.
    private Entry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Entry() {
      point_ = 0;
      content_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      scriptPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      scriptBundle_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Entry();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Entry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              point_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                content_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              content_.add(s);
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                scriptPath_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              scriptPath_.add(s);
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              scriptBundle_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          content_ = content_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          scriptPath_ = scriptPath_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_Entry_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_Entry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.class, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder.class);
    }

    public static final int POINT_FIELD_NUMBER = 1;
    private int point_;
    /**
     * <pre>
     * The protoc insertion point at which the generated code will be inserted.
     * </pre>
     *
     * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
     */
    public int getPointValue() {
      return point_;
    }
    /**
     * <pre>
     * The protoc insertion point at which the generated code will be inserted.
     * </pre>
     *
     * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionPoint getPoint() {
      @SuppressWarnings("deprecation")
      com.github.marcoferrer.krotoplus.config.InsertionPoint result = com.github.marcoferrer.krotoplus.config.InsertionPoint.valueOf(point_);
      return result == null ? com.github.marcoferrer.krotoplus.config.InsertionPoint.UNRECOGNIZED : result;
    }

    public static final int CONTENT_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList content_;
    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getContentList() {
      return content_;
    }
    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    public int getContentCount() {
      return content_.size();
    }
    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    public java.lang.String getContent(int index) {
      return content_.get(index);
    }
    /**
     * <pre>
     * String literal of content to be set at the insertion point.
     * Referencing the current message type, use the value '{{message_type}}'.
     * This is useful when you want to use the current message as a generic type param.
     * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
     * </pre>
     *
     * <code>repeated string content = 2;</code>
     */
    public com.google.protobuf.ByteString
        getContentBytes(int index) {
      return content_.getByteString(index);
    }

    public static final int SCRIPT_PATH_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList scriptPath_;
    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getScriptPathList() {
      return scriptPath_;
    }
    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    public int getScriptPathCount() {
      return scriptPath_.size();
    }
    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    public java.lang.String getScriptPath(int index) {
      return scriptPath_.get(index);
    }
    /**
     * <pre>
     * List of paths to kotlin script files to execute for this configuration.
     * The scripts are compile at runtime by an embedded kotlin compiler.
     * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
     * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
     * For a more performant option for script execution, precompiled scripts are supported.
     * Paths for precompile scripts need to match their location in the supplied jar.
     * ie. 'sampleInsertionScript.kts'
     * </pre>
     *
     * <code>repeated string script_path = 3;</code>
     */
    public com.google.protobuf.ByteString
        getScriptPathBytes(int index) {
      return scriptPath_.getByteString(index);
    }

    public static final int SCRIPT_BUNDLE_FIELD_NUMBER = 4;
    private volatile java.lang.Object scriptBundle_;
    /**
     * <pre>
     * Path to the jar containing precompile scripts.
     * </pre>
     *
     * <code>string script_bundle = 4;</code>
     */
    public java.lang.String getScriptBundle() {
      java.lang.Object ref = scriptBundle_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        scriptBundle_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Path to the jar containing precompile scripts.
     * </pre>
     *
     * <code>string script_bundle = 4;</code>
     */
    public com.google.protobuf.ByteString
        getScriptBundleBytes() {
      java.lang.Object ref = scriptBundle_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        scriptBundle_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (point_ != com.github.marcoferrer.krotoplus.config.InsertionPoint.UNKNOWN.getNumber()) {
        output.writeEnum(1, point_);
      }
      for (int i = 0; i < content_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, content_.getRaw(i));
      }
      for (int i = 0; i < scriptPath_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, scriptPath_.getRaw(i));
      }
      if (!getScriptBundleBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, scriptBundle_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (point_ != com.github.marcoferrer.krotoplus.config.InsertionPoint.UNKNOWN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, point_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < content_.size(); i++) {
          dataSize += computeStringSizeNoTag(content_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getContentList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scriptPath_.size(); i++) {
          dataSize += computeStringSizeNoTag(scriptPath_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getScriptPathList().size();
      }
      if (!getScriptBundleBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, scriptBundle_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry)) {
        return super.equals(obj);
      }
      com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry other = (com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry) obj;

      if (point_ != other.point_) return false;
      if (!getContentList()
          .equals(other.getContentList())) return false;
      if (!getScriptPathList()
          .equals(other.getScriptPathList())) return false;
      if (!getScriptBundle()
          .equals(other.getScriptBundle())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + POINT_FIELD_NUMBER;
      hash = (53 * hash) + point_;
      if (getContentCount() > 0) {
        hash = (37 * hash) + CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getContentList().hashCode();
      }
      if (getScriptPathCount() > 0) {
        hash = (37 * hash) + SCRIPT_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getScriptPathList().hashCode();
      }
      hash = (37 * hash) + SCRIPT_BUNDLE_FIELD_NUMBER;
      hash = (53 * hash) + getScriptBundle().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration to apply to the files matched by the file filter.
     * </pre>
     *
     * Protobuf type {@code krotoplus.compiler.InsertionsGenOptions.Entry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:krotoplus.compiler.InsertionsGenOptions.Entry)
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_Entry_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_Entry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.class, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder.class);
      }

      // Construct using com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        point_ = 0;

        content_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        scriptPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        scriptBundle_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_Entry_descriptor;
      }

      @java.lang.Override
      public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry getDefaultInstanceForType() {
        return com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.getDefaultInstance();
      }

      @java.lang.Override
      public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry build() {
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry buildPartial() {
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry result = new com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry(this);
        int from_bitField0_ = bitField0_;
        result.point_ = point_;
        if (((bitField0_ & 0x00000001) != 0)) {
          content_ = content_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.content_ = content_;
        if (((bitField0_ & 0x00000002) != 0)) {
          scriptPath_ = scriptPath_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.scriptPath_ = scriptPath_;
        result.scriptBundle_ = scriptBundle_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry) {
          return mergeFrom((com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry other) {
        if (other == com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.getDefaultInstance()) return this;
        if (other.point_ != 0) {
          setPointValue(other.getPointValue());
        }
        if (!other.content_.isEmpty()) {
          if (content_.isEmpty()) {
            content_ = other.content_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureContentIsMutable();
            content_.addAll(other.content_);
          }
          onChanged();
        }
        if (!other.scriptPath_.isEmpty()) {
          if (scriptPath_.isEmpty()) {
            scriptPath_ = other.scriptPath_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureScriptPathIsMutable();
            scriptPath_.addAll(other.scriptPath_);
          }
          onChanged();
        }
        if (!other.getScriptBundle().isEmpty()) {
          scriptBundle_ = other.scriptBundle_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int point_ = 0;
      /**
       * <pre>
       * The protoc insertion point at which the generated code will be inserted.
       * </pre>
       *
       * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
       */
      public int getPointValue() {
        return point_;
      }
      /**
       * <pre>
       * The protoc insertion point at which the generated code will be inserted.
       * </pre>
       *
       * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
       */
      public Builder setPointValue(int value) {
        point_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The protoc insertion point at which the generated code will be inserted.
       * </pre>
       *
       * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
       */
      public com.github.marcoferrer.krotoplus.config.InsertionPoint getPoint() {
        @SuppressWarnings("deprecation")
        com.github.marcoferrer.krotoplus.config.InsertionPoint result = com.github.marcoferrer.krotoplus.config.InsertionPoint.valueOf(point_);
        return result == null ? com.github.marcoferrer.krotoplus.config.InsertionPoint.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The protoc insertion point at which the generated code will be inserted.
       * </pre>
       *
       * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
       */
      public Builder setPoint(com.github.marcoferrer.krotoplus.config.InsertionPoint value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        point_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The protoc insertion point at which the generated code will be inserted.
       * </pre>
       *
       * <code>.krotoplus.compiler.InsertionPoint point = 1;</code>
       */
      public Builder clearPoint() {
        
        point_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList content_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureContentIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          content_ = new com.google.protobuf.LazyStringArrayList(content_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getContentList() {
        return content_.getUnmodifiableView();
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public int getContentCount() {
        return content_.size();
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public java.lang.String getContent(int index) {
        return content_.get(index);
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public com.google.protobuf.ByteString
          getContentBytes(int index) {
        return content_.getByteString(index);
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public Builder setContent(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureContentIsMutable();
        content_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public Builder addContent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureContentIsMutable();
        content_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public Builder addAllContent(
          java.lang.Iterable<java.lang.String> values) {
        ensureContentIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, content_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public Builder clearContent() {
        content_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * String literal of content to be set at the insertion point.
       * Referencing the current message type, use the value '{{message_type}}'.
       * This is useful when you want to use the current message as a generic type param.
       * ie. com.krotoplus.example.MyCompanionInterface&lt;{{message_type}}, {{message_type}}.Builder&gt;
       * </pre>
       *
       * <code>repeated string content = 2;</code>
       */
      public Builder addContentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureContentIsMutable();
        content_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList scriptPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureScriptPathIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          scriptPath_ = new com.google.protobuf.LazyStringArrayList(scriptPath_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getScriptPathList() {
        return scriptPath_.getUnmodifiableView();
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public int getScriptPathCount() {
        return scriptPath_.size();
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public java.lang.String getScriptPath(int index) {
        return scriptPath_.get(index);
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public com.google.protobuf.ByteString
          getScriptPathBytes(int index) {
        return scriptPath_.getByteString(index);
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public Builder setScriptPath(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureScriptPathIsMutable();
        scriptPath_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public Builder addScriptPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureScriptPathIsMutable();
        scriptPath_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public Builder addAllScriptPath(
          java.lang.Iterable<java.lang.String> values) {
        ensureScriptPathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, scriptPath_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public Builder clearScriptPath() {
        scriptPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of paths to kotlin script files to execute for this configuration.
       * The scripts are compile at runtime by an embedded kotlin compiler.
       * This comes at the cost of performance.Paths for scripts compiled at run time must be relative to the path of the configuration file.
       * ie. 'kp-scripts/src/main/kotlin/sampleInsertionScript.kts'
       * For a more performant option for script execution, precompiled scripts are supported.
       * Paths for precompile scripts need to match their location in the supplied jar.
       * ie. 'sampleInsertionScript.kts'
       * </pre>
       *
       * <code>repeated string script_path = 3;</code>
       */
      public Builder addScriptPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureScriptPathIsMutable();
        scriptPath_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object scriptBundle_ = "";
      /**
       * <pre>
       * Path to the jar containing precompile scripts.
       * </pre>
       *
       * <code>string script_bundle = 4;</code>
       */
      public java.lang.String getScriptBundle() {
        java.lang.Object ref = scriptBundle_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          scriptBundle_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Path to the jar containing precompile scripts.
       * </pre>
       *
       * <code>string script_bundle = 4;</code>
       */
      public com.google.protobuf.ByteString
          getScriptBundleBytes() {
        java.lang.Object ref = scriptBundle_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          scriptBundle_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Path to the jar containing precompile scripts.
       * </pre>
       *
       * <code>string script_bundle = 4;</code>
       */
      public Builder setScriptBundle(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        scriptBundle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to the jar containing precompile scripts.
       * </pre>
       *
       * <code>string script_bundle = 4;</code>
       */
      public Builder clearScriptBundle() {
        
        scriptBundle_ = getDefaultInstance().getScriptBundle();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to the jar containing precompile scripts.
       * </pre>
       *
       * <code>string script_bundle = 4;</code>
       */
      public Builder setScriptBundleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        scriptBundle_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:krotoplus.compiler.InsertionsGenOptions.Entry)
    }

    // @@protoc_insertion_point(class_scope:krotoplus.compiler.InsertionsGenOptions.Entry)
    private static final com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry();
    }

    public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Entry>
        PARSER = new com.google.protobuf.AbstractParser<Entry>() {
      @java.lang.Override
      public Entry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Entry(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Entry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Entry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int FILTER_FIELD_NUMBER = 1;
  private com.github.marcoferrer.krotoplus.config.FileFilter filter_;
  /**
   * <pre>
   * Filter used for limiting the input files that are processed by the code generator
   * The default filter will match true against all input files.
   * </pre>
   *
   * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
   */
  public boolean hasFilter() {
    return filter_ != null;
  }
  /**
   * <pre>
   * Filter used for limiting the input files that are processed by the code generator
   * The default filter will match true against all input files.
   * </pre>
   *
   * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
   */
  public com.github.marcoferrer.krotoplus.config.FileFilter getFilter() {
    return filter_ == null ? com.github.marcoferrer.krotoplus.config.FileFilter.getDefaultInstance() : filter_;
  }
  /**
   * <pre>
   * Filter used for limiting the input files that are processed by the code generator
   * The default filter will match true against all input files.
   * </pre>
   *
   * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
   */
  public com.github.marcoferrer.krotoplus.config.FileFilterOrBuilder getFilterOrBuilder() {
    return getFilter();
  }

  public static final int ENTRY_FIELD_NUMBER = 2;
  private java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry> entry_;
  /**
   * <pre>
   * List of configurations to be applied to the file filter.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
   */
  public java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry> getEntryList() {
    return entry_;
  }
  /**
   * <pre>
   * List of configurations to be applied to the file filter.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
   */
  public java.util.List<? extends com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder> 
      getEntryOrBuilderList() {
    return entry_;
  }
  /**
   * <pre>
   * List of configurations to be applied to the file filter.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
   */
  public int getEntryCount() {
    return entry_.size();
  }
  /**
   * <pre>
   * List of configurations to be applied to the file filter.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
   */
  public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry getEntry(int index) {
    return entry_.get(index);
  }
  /**
   * <pre>
   * List of configurations to be applied to the file filter.
   * </pre>
   *
   * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
   */
  public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder getEntryOrBuilder(
      int index) {
    return entry_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (filter_ != null) {
      output.writeMessage(1, getFilter());
    }
    for (int i = 0; i < entry_.size(); i++) {
      output.writeMessage(2, entry_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (filter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getFilter());
    }
    for (int i = 0; i < entry_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, entry_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.marcoferrer.krotoplus.config.InsertionsGenOptions)) {
      return super.equals(obj);
    }
    com.github.marcoferrer.krotoplus.config.InsertionsGenOptions other = (com.github.marcoferrer.krotoplus.config.InsertionsGenOptions) obj;

    if (hasFilter() != other.hasFilter()) return false;
    if (hasFilter()) {
      if (!getFilter()
          .equals(other.getFilter())) return false;
    }
    if (!getEntryList()
        .equals(other.getEntryList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasFilter()) {
      hash = (37 * hash) + FILTER_FIELD_NUMBER;
      hash = (53 * hash) + getFilter().hashCode();
    }
    if (getEntryCount() > 0) {
      hash = (37 * hash) + ENTRY_FIELD_NUMBER;
      hash = (53 * hash) + getEntryList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration used by the 'Protoc Insertions' code generator.
   * Since this code generator relies on the protoc insertion point API,
   * its outputDir must match that of the protoc java plugin.
   * </pre>
   *
   * Protobuf type {@code krotoplus.compiler.InsertionsGenOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:krotoplus.compiler.InsertionsGenOptions)
      com.github.marcoferrer.krotoplus.config.InsertionsGenOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.class, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Builder.class);
    }

    // Construct using com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getEntryFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (filterBuilder_ == null) {
        filter_ = null;
      } else {
        filter_ = null;
        filterBuilder_ = null;
      }
      if (entryBuilder_ == null) {
        entry_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        entryBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.marcoferrer.krotoplus.config.Config.internal_static_krotoplus_compiler_InsertionsGenOptions_descriptor;
    }

    @java.lang.Override
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions getDefaultInstanceForType() {
      return com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions build() {
      com.github.marcoferrer.krotoplus.config.InsertionsGenOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions buildPartial() {
      com.github.marcoferrer.krotoplus.config.InsertionsGenOptions result = new com.github.marcoferrer.krotoplus.config.InsertionsGenOptions(this);
      int from_bitField0_ = bitField0_;
      if (filterBuilder_ == null) {
        result.filter_ = filter_;
      } else {
        result.filter_ = filterBuilder_.build();
      }
      if (entryBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          entry_ = java.util.Collections.unmodifiableList(entry_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.entry_ = entry_;
      } else {
        result.entry_ = entryBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.marcoferrer.krotoplus.config.InsertionsGenOptions) {
        return mergeFrom((com.github.marcoferrer.krotoplus.config.InsertionsGenOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions other) {
      if (other == com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.getDefaultInstance()) return this;
      if (other.hasFilter()) {
        mergeFilter(other.getFilter());
      }
      if (entryBuilder_ == null) {
        if (!other.entry_.isEmpty()) {
          if (entry_.isEmpty()) {
            entry_ = other.entry_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureEntryIsMutable();
            entry_.addAll(other.entry_);
          }
          onChanged();
        }
      } else {
        if (!other.entry_.isEmpty()) {
          if (entryBuilder_.isEmpty()) {
            entryBuilder_.dispose();
            entryBuilder_ = null;
            entry_ = other.entry_;
            bitField0_ = (bitField0_ & ~0x00000001);
            entryBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEntryFieldBuilder() : null;
          } else {
            entryBuilder_.addAllMessages(other.entry_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.marcoferrer.krotoplus.config.InsertionsGenOptions parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.marcoferrer.krotoplus.config.InsertionsGenOptions) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.github.marcoferrer.krotoplus.config.FileFilter filter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.FileFilter, com.github.marcoferrer.krotoplus.config.FileFilter.Builder, com.github.marcoferrer.krotoplus.config.FileFilterOrBuilder> filterBuilder_;
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public boolean hasFilter() {
      return filterBuilder_ != null || filter_ != null;
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public com.github.marcoferrer.krotoplus.config.FileFilter getFilter() {
      if (filterBuilder_ == null) {
        return filter_ == null ? com.github.marcoferrer.krotoplus.config.FileFilter.getDefaultInstance() : filter_;
      } else {
        return filterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public Builder setFilter(com.github.marcoferrer.krotoplus.config.FileFilter value) {
      if (filterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filter_ = value;
        onChanged();
      } else {
        filterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public Builder setFilter(
        com.github.marcoferrer.krotoplus.config.FileFilter.Builder builderForValue) {
      if (filterBuilder_ == null) {
        filter_ = builderForValue.build();
        onChanged();
      } else {
        filterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public Builder mergeFilter(com.github.marcoferrer.krotoplus.config.FileFilter value) {
      if (filterBuilder_ == null) {
        if (filter_ != null) {
          filter_ =
            com.github.marcoferrer.krotoplus.config.FileFilter.newBuilder(filter_).mergeFrom(value).buildPartial();
        } else {
          filter_ = value;
        }
        onChanged();
      } else {
        filterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public Builder clearFilter() {
      if (filterBuilder_ == null) {
        filter_ = null;
        onChanged();
      } else {
        filter_ = null;
        filterBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public com.github.marcoferrer.krotoplus.config.FileFilter.Builder getFilterBuilder() {
      
      onChanged();
      return getFilterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    public com.github.marcoferrer.krotoplus.config.FileFilterOrBuilder getFilterOrBuilder() {
      if (filterBuilder_ != null) {
        return filterBuilder_.getMessageOrBuilder();
      } else {
        return filter_ == null ?
            com.github.marcoferrer.krotoplus.config.FileFilter.getDefaultInstance() : filter_;
      }
    }
    /**
     * <pre>
     * Filter used for limiting the input files that are processed by the code generator
     * The default filter will match true against all input files.
     * </pre>
     *
     * <code>.krotoplus.compiler.FileFilter filter = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.FileFilter, com.github.marcoferrer.krotoplus.config.FileFilter.Builder, com.github.marcoferrer.krotoplus.config.FileFilterOrBuilder> 
        getFilterFieldBuilder() {
      if (filterBuilder_ == null) {
        filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.FileFilter, com.github.marcoferrer.krotoplus.config.FileFilter.Builder, com.github.marcoferrer.krotoplus.config.FileFilterOrBuilder>(
                getFilter(),
                getParentForChildren(),
                isClean());
        filter_ = null;
      }
      return filterBuilder_;
    }

    private java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry> entry_ =
      java.util.Collections.emptyList();
    private void ensureEntryIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        entry_ = new java.util.ArrayList<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry>(entry_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder> entryBuilder_;

    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry> getEntryList() {
      if (entryBuilder_ == null) {
        return java.util.Collections.unmodifiableList(entry_);
      } else {
        return entryBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public int getEntryCount() {
      if (entryBuilder_ == null) {
        return entry_.size();
      } else {
        return entryBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry getEntry(int index) {
      if (entryBuilder_ == null) {
        return entry_.get(index);
      } else {
        return entryBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder setEntry(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry value) {
      if (entryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEntryIsMutable();
        entry_.set(index, value);
        onChanged();
      } else {
        entryBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder setEntry(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder builderForValue) {
      if (entryBuilder_ == null) {
        ensureEntryIsMutable();
        entry_.set(index, builderForValue.build());
        onChanged();
      } else {
        entryBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder addEntry(com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry value) {
      if (entryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEntryIsMutable();
        entry_.add(value);
        onChanged();
      } else {
        entryBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder addEntry(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry value) {
      if (entryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEntryIsMutable();
        entry_.add(index, value);
        onChanged();
      } else {
        entryBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder addEntry(
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder builderForValue) {
      if (entryBuilder_ == null) {
        ensureEntryIsMutable();
        entry_.add(builderForValue.build());
        onChanged();
      } else {
        entryBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder addEntry(
        int index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder builderForValue) {
      if (entryBuilder_ == null) {
        ensureEntryIsMutable();
        entry_.add(index, builderForValue.build());
        onChanged();
      } else {
        entryBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder addAllEntry(
        java.lang.Iterable<? extends com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry> values) {
      if (entryBuilder_ == null) {
        ensureEntryIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, entry_);
        onChanged();
      } else {
        entryBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder clearEntry() {
      if (entryBuilder_ == null) {
        entry_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        entryBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public Builder removeEntry(int index) {
      if (entryBuilder_ == null) {
        ensureEntryIsMutable();
        entry_.remove(index);
        onChanged();
      } else {
        entryBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder getEntryBuilder(
        int index) {
      return getEntryFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder getEntryOrBuilder(
        int index) {
      if (entryBuilder_ == null) {
        return entry_.get(index);  } else {
        return entryBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public java.util.List<? extends com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder> 
         getEntryOrBuilderList() {
      if (entryBuilder_ != null) {
        return entryBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(entry_);
      }
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder addEntryBuilder() {
      return getEntryFieldBuilder().addBuilder(
          com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.getDefaultInstance());
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder addEntryBuilder(
        int index) {
      return getEntryFieldBuilder().addBuilder(
          index, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.getDefaultInstance());
    }
    /**
     * <pre>
     * List of configurations to be applied to the file filter.
     * </pre>
     *
     * <code>repeated .krotoplus.compiler.InsertionsGenOptions.Entry entry = 2;</code>
     */
    public java.util.List<com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder> 
         getEntryBuilderList() {
      return getEntryFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder> 
        getEntryFieldBuilder() {
      if (entryBuilder_ == null) {
        entryBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.Entry.Builder, com.github.marcoferrer.krotoplus.config.InsertionsGenOptions.EntryOrBuilder>(
                entry_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        entry_ = null;
      }
      return entryBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:krotoplus.compiler.InsertionsGenOptions)
  }

  // @@protoc_insertion_point(class_scope:krotoplus.compiler.InsertionsGenOptions)
  private static final com.github.marcoferrer.krotoplus.config.InsertionsGenOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.marcoferrer.krotoplus.config.InsertionsGenOptions();
  }

  public static com.github.marcoferrer.krotoplus.config.InsertionsGenOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InsertionsGenOptions>
      PARSER = new com.google.protobuf.AbstractParser<InsertionsGenOptions>() {
    @java.lang.Override
    public InsertionsGenOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InsertionsGenOptions(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InsertionsGenOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InsertionsGenOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.marcoferrer.krotoplus.config.InsertionsGenOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

