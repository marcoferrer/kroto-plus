/*
 *  Copyright 2019 Kroto+ Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.google.protobuf'

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xuse-experimental=kotlin.Experimental"
        ]
    }
}

dependencies{
    
    testImplementation "com.google.api.grpc:proto-google-common-protos:${Versions.commonProto}"
    
    testImplementation "io.mockk:mockk:${Versions.mockk}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${Versions.coroutines}"
    testImplementation "com.google.protobuf:protobuf-java:${Versions.protobuf}"
    testImplementation "io.grpc:grpc-protobuf:${Versions.grpc}"
    testImplementation "io.grpc:grpc-stub:${Versions.grpc}"
    testImplementation "io.grpc:grpc-netty:${Versions.grpc}"
    testImplementation "io.grpc:grpc-testing:${Versions.grpc}"

    testProtobuf project(':test-api')
    testImplementation project(':test-api:grpc')
    testImplementation project(':kroto-plus-message')
    testImplementation project(':kroto-plus-coroutines')
    testImplementation project(':kroto-plus-test')
    testImplementation "io.mockk:mockk:${Versions.mockk}"
    
    // For jdk 9+ you need to include javax.annotations
    // The reason is outlined in this grpc issue
    // https://github.com/grpc/grpc-java/issues/4725
    testImplementation("javax.annotation:javax.annotation-api:1.2")

}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${Versions.protobuf}"}

    //noinspection GroovyAssignabilityCheck
    plugins {
        kroto {
            path = localPluginPath.kroto
        }
    }

    generateProtoTasks {
        def krotoConfig = file("krotoPlusConfig.asciipb")

        all().each{ task ->
            configProtoTaskWithKroto(task, krotoConfig)
        }
    }
}
