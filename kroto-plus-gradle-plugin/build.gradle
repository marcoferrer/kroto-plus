apply plugin: 'java-gradle-plugin'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'com.google.protobuf'

apply from: "$rootDir/publishing.gradle"

def pluginId = 'com.github.marcoferrer.kroto-plus'

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    google()
    // Needed for resolving 'kotlinx-metadata-jvm'
    // A transitive dependency of gradle Kotlin DSL
    maven { url "https://kotlin.bintray.com/kotlinx/" }
}

gradlePlugin {
    plugins {
        krotoPlusPlugin {
            id = pluginId
            implementationClass = 'com.github.marcoferrer.krotoplus.gradle.KrotoPlusGradlePlugin'
        }
    }
}

dependencies{
    implementation "com.google.protobuf:protobuf-java:${Versions.protobuf}"
    compileOnly gradleApi()
    compileOnly "org.gradle:gradle-kotlin-dsl:1.0.4"
    compileOnly "com.google.protobuf:protobuf-gradle-plugin:0.8.8"
    compileOnly 'com.google.gradle:osdetector-gradle-plugin:1.6.2'
    compileOnly project(":protoc-gen-kroto-plus")
    protobuf project(":protoc-gen-kroto-plus")
}

description = "Kroto+ Gradle Plugin"

pluginBundle {
    website = 'https://github.com/marcoferrer/kroto-plus'
    vcsUrl = 'https://github.com/marcoferrer/kroto-plus.git'

    plugins {
        krotoPlusPlugin {
            id = pluginId
            displayName = 'Kroto+ Config Plugin'
            description = 'gRPC Kotlin Coroutines, Protobuf DSL, Scripting for Protoc'
            tags = [ 'coroutines', 'kotlin', 'grpc', 'protobuf','protocol-buffers', 'code-generation' ]
        }
    }
}


protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${Versions.protobuf}"}

    //noinspection GroovyAssignabilityCheck
    plugins {
        kroto {
            path = localPluginPath.kroto
        }
    }

    generateProtoTasks {
        def krotoConfig = file("krotoPlusConfig.asciipb")

        all().each{ task ->
            task.dependsOn ':kroto-plus-gradle-plugin:gen-config-dsl:jar'
            configProtoTaskWithKroto(task, krotoConfig)
        }
    }

}