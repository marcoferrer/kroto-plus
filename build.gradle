buildscript {
    ext {
        bintrayUser = project.hasProperty('bintrayUser') ?
                project.property('bintrayUser') : System.getenv('BINTRAY_USER')

        bintrayApiKey = project.hasProperty('bintrayApiKey') ?
                project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    }

    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins{
    id 'com.google.protobuf' version '0.8.6' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.3.31' apply false
    id "com.jfrog.bintray" version "1.8.4" apply false
    id "com.jfrog.artifactory" version "4.8.1" apply false
    id "org.springframework.boot" version "2.0.3.RELEASE" apply false
    id 'com.gradle.plugin-publish' version '0.9.7' apply false
    id "com.google.osdetector" version "1.4.0"
}

subprojects{ subproject ->

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/marcoferrer/kroto-plus/" }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    }

    apply plugin: 'idea'
    apply plugin: 'kotlin'

    group = 'com.github.marcoferrer.krotoplus'
    version = '0.4.1-SNAPSHOT'

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib"

        testImplementation group: 'junit', name: 'junit', version: '[4,)'
        testImplementation "org.jetbrains.kotlin:kotlin-test"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    }


    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events (
                'FAILED',
                'PASSED',
                'SKIPPED',
                'STANDARD_OUT'
            )
            exceptionFormat 'FULL'
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events(
                    'STARTED',
                    'FAILED',
                    'PASSED',
                    'SKIPPED',
                    'STANDARD_ERROR',
                    'STANDARD_OUT'
                )
                exceptionFormat 'FULL'
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: " +
                            "${result.resultType} (${result.testCount} tests, " +
                            "${result.successfulTestCount} successes, " +
                            "${result.failedTestCount} failures, " +
                            "${result.skippedTestCount} skipped)"
                    
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}