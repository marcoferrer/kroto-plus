// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package io.grpc.examples.helloworld

import com.github.marcoferrer.krotoplus.coroutines.CALL_OPTION_COROUTINE_CONTEXT
import com.github.marcoferrer.krotoplus.coroutines.client.ClientBidiCallChannel
import com.github.marcoferrer.krotoplus.coroutines.client.ClientStreamingCallChannel
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallBidiStreaming
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallClientStreaming
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallServerStreaming
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallBidiStreaming
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallClientStreaming
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallServerStreaming
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnimplementedStream
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnimplementedUnary
import io.grpc.BindableService
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.stub.AbstractStub
import io.grpc.stub.StreamObserver
import io.grpc.stub.annotations.RpcMethod
import javax.annotation.Generated
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.coroutines.CoroutineContext
import kotlin.jvm.JvmName
import kotlinx.coroutines.CompletableDeferred
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.ObsoleteCoroutinesApi
import kotlinx.coroutines.channels.ReceiveChannel
import kotlinx.coroutines.channels.SendChannel

@Generated(
        value = ["by Kroto+ Proto-c Plugin (version 0.2.2-SNAPSHOT)"],
        comments = "Source: helloworld.proto"
)
object GreeterCoroutineGrpc {
    fun newStub(channel: Channel): GreeterCoroutineStub = GreeterCoroutineStub.newStub(channel)
    class GreeterCoroutineStub private constructor(channel: Channel, callOptions: CallOptions = CallOptions.DEFAULT) : AbstractStub<GreeterCoroutineStub>(channel, callOptions),
            CoroutineScope {
        @ExperimentalCoroutinesApi
        override val coroutineContext: CoroutineContext
            get() = callOptions.getOption(CALL_OPTION_COROUTINE_CONTEXT) ?: Dispatchers.Unconfined
        override fun build(channel: Channel, callOptions: CallOptions): GreeterCoroutineStub = GreeterCoroutineStub(channel,callOptions)

        @RpcMethod(
                fullMethodName = "$SERVICE_NAME/SayHello",
                requestType = HelloRequest::class,
                responseType = HelloReply::class,
                methodType = MethodDescriptor.MethodType.UNARY
        )
        suspend fun sayHello(request: HelloRequest): HelloReply = clientCallUnary(request, GreeterGrpc.getSayHelloMethod())

        @RpcMethod(
                fullMethodName = "$SERVICE_NAME/SayHelloStreaming",
                requestType = HelloRequest::class,
                responseType = HelloReply::class,
                methodType = MethodDescriptor.MethodType.BIDI_STREAMING
        )
        @ObsoleteCoroutinesApi
        fun sayHelloStreaming(): ClientBidiCallChannel<HelloRequest, HelloReply> = clientCallBidiStreaming(GreeterGrpc.getSayHelloStreamingMethod())

        @RpcMethod(
                fullMethodName = "$SERVICE_NAME/SayHelloClientStreaming",
                requestType = HelloRequest::class,
                responseType = HelloReply::class,
                methodType = MethodDescriptor.MethodType.CLIENT_STREAMING
        )
        @ObsoleteCoroutinesApi
        fun sayHelloClientStreaming(): ClientStreamingCallChannel<HelloRequest, HelloReply> = clientCallClientStreaming(GreeterGrpc.getSayHelloClientStreamingMethod())

        @RpcMethod(
                fullMethodName = "$SERVICE_NAME/SayHelloServerStreaming",
                requestType = HelloRequest::class,
                responseType = HelloReply::class,
                methodType = MethodDescriptor.MethodType.SERVER_STREAMING
        )
        fun sayHelloServerStreaming(request: HelloRequest): ReceiveChannel<HelloReply> = clientCallServerStreaming(request, GreeterGrpc.getSayHelloServerStreamingMethod())

        suspend inline fun sayHello(block: HelloRequest.Builder.() -> Unit): HelloReply {
            val request = HelloRequest.newBuilder().apply(block).build()
            return sayHello(request)
        }

        inline fun sayHelloServerStreaming(block: HelloRequest.Builder.() -> Unit): ReceiveChannel<HelloReply> {
            val request = HelloRequest.newBuilder().apply(block).build()
            return sayHelloServerStreaming(request)
        }
        companion object {
            const val SERVICE_NAME: String = GreeterGrpc.SERVICE_NAME

            fun newStub(channel: Channel): GreeterCoroutineStub = GreeterCoroutineStub(channel)}
    }

    abstract class GreeterImplBase : BindableService, CoroutineScope {
        @ExperimentalCoroutinesApi
        override val coroutineContext: CoroutineContext
            get() = Dispatchers.Unconfined
        private val delegate: ServiceDelegate = ServiceDelegate()

        override fun bindService(): ServerServiceDefinition = delegate.bindService()
        open suspend fun sayHello(request: HelloRequest, completableResponse: CompletableDeferred<HelloReply>) {
            serverCallUnimplementedUnary(GreeterGrpc.getSayHelloMethod(),completableResponse)
        }

        open suspend fun sayHelloStreaming(requestChannel: ReceiveChannel<HelloRequest>, responseChannel: SendChannel<HelloReply>) {
            serverCallUnimplementedStream(GreeterGrpc.getSayHelloStreamingMethod(),responseChannel)
        }

        open suspend fun sayHelloClientStreaming(requestChannel: ReceiveChannel<HelloRequest>, completableResponse: CompletableDeferred<HelloReply>) {
            serverCallUnimplementedUnary(GreeterGrpc.getSayHelloClientStreamingMethod(),completableResponse)
        }

        open suspend fun sayHelloServerStreaming(request: HelloRequest, responseChannel: SendChannel<HelloReply>) {
            serverCallUnimplementedStream(GreeterGrpc.getSayHelloServerStreamingMethod(),responseChannel)
        }

        @JvmName("completeHelloReply")
        inline fun CompletableDeferred<HelloReply>.complete(block: HelloReply.Builder.() -> Unit): Boolean {
            val response = HelloReply.newBuilder().apply(block).build()
            return complete(response)
        }

        @JvmName("sendHelloReply")
        suspend inline fun SendChannel<HelloReply>.send(block: HelloReply.Builder.() -> Unit) {
            val response = HelloReply.newBuilder().apply(block).build()
            send(response)
        }

        private inner class ServiceDelegate : GreeterGrpc.GreeterImplBase() {
            override fun sayHello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {
                serverCallUnary(responseObserver) { completableResponse ->
                    sayHello(request, completableResponse)
                }
            }

            @ObsoleteCoroutinesApi
            @ExperimentalCoroutinesApi
            override fun sayHelloStreaming(responseObserver: StreamObserver<HelloReply>): StreamObserver<HelloRequest> {
                val requestChannel = serverCallBidiStreaming(responseObserver) { requestChannel: ReceiveChannel<HelloRequest>, responseChannel: SendChannel<HelloReply> ->
                    sayHelloStreaming(requestChannel, responseChannel)
                }
                return requestChannel
            }

            @ExperimentalCoroutinesApi
            override fun sayHelloClientStreaming(responseObserver: StreamObserver<HelloReply>): StreamObserver<HelloRequest> {
                val requestObserver = serverCallClientStreaming(responseObserver) { requestChannel: ReceiveChannel<HelloRequest>, completableResponse ->
                    sayHelloClientStreaming(requestChannel, completableResponse)
                }
                return requestObserver
            }

            @ObsoleteCoroutinesApi
            override fun sayHelloServerStreaming(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {
                serverCallServerStreaming(responseObserver) { responseChannel: SendChannel<HelloReply> ->
                    sayHelloServerStreaming(request, responseChannel)
                }
            }
        }
    }
}

@JvmName("sendHelloRequest")
suspend inline fun SendChannel<HelloRequest>.send(block: HelloRequest.Builder.() -> Unit) {
    val request = HelloRequest.newBuilder().apply(block).build()
    send(request)
}
